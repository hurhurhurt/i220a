#include "fn-trace.h"
#include "x86-64_lde.h"
#include "memalloc.h"
#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

enum {
  CALL_OP = 0xE8,
  RET_FAR_OP = 0xCB,
  RET_FAR_WITH_POP_OP = 0xCA,
  RET_NEAR_OP = 0xC3,
  RET_NEAR_WITH_POP_OP = 0xC2
};

static inline bool is_call(unsigned op) { return op == CALL_OP; }
static inline bool is_ret(unsigned op) {
  return
    op == RET_NEAR_OP || op == RET_NEAR_WITH_POP_OP ||
    op == RET_FAR_OP || op == RET_FAR_WITH_POP_OP;
}

/** FnsData is an opaque struct FnsData which can be implemented as
 *  desired by an implementation. This struct will hold a collection
 *  of FnInfo's.
 */
/** Return pointer to opaque data structure containing collection of
 *  FnInfo's for functions which are callable directly or indirectly
 *  from the function whose address is rootFn.
 */

typedef struct FnsData{
  int size;
  int index;
  FnInfo ** info;
}FnsData;
  
const FnsData * new_fns_data (void *rootFn)
{
  //verify assumption used when decoding call address
  assert(sizeof(int) == 4);
  int length = get_op_length(rootFn);
  FnsData * data = mallocChk(sizeof(FnsData));
  unsigned char * trace = fnsData->info
  data->size = 0;
  data->index = 0;
  data->info = malloc(data->size * sizeof(FnsData));
  //fn_trace(data, rootFn);
  return data;
}

void
fn_trace(void *addr, FnsData fnsData){
  FnsData * newData = new_fns_data(info);/*
  if (newData != NULL){
    newData->next->info->address = data->info->address;
    newData->next = data;
    newData->index++;
    newData->size++;
    }*/
}

/** Free all resources occupied by fnsData. fnsData must have been
 *  returned by new_fns_data().  It is not ok to use to fnsData after
 *  this call.
 */
void
free_fns_data(FnsData *fnsData)
{
  for (int i = 0; i < fnsData->size; i++){
    free(fnsData->info[i]);
  }
  free(fnsData);
}

/** Iterate over all FnInfo's in fnsData.  Make initial call with NULL
 *  lastFnInfo.  Keep calling with return value as lastFnInfo, until
 *  next_fn_info() returns NULL.  Values must be returned sorted in
 *  increasing order by fnInfoP->address.
 *
 *  Sample iteration:
 *
 *  for (FnInfo *fnInfoP = next_fn_info(fnsData, NULL); fnInfoP != NULL;
 *       fnInfoP = next_fn_info(fnsData, fnInfoP)) {
 *    //body of iteration
 *  }
 *
 */
const FnInfo *
next_fn_info(const FnsData *fnsData, const FnInfo *lastFnInfo)
{
  //@TODO
  return NULL;
}
